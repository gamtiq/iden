{"version":3,"sources":["../src/iden.js"],"names":["getUuid","globalObj","Function","settings","hex","result","nL","length","shift","bUsualItem","nI","nRandom","randNumGen","sItem","rng","Math","random","Date","getTime","performance","now","floor","join"],"mappings":"AAAA;;;;;;;;AASA;;;;;;AAMA;AACA;;AAEA;;AAEA;;;QAqBgBA,O,GAAAA,O;AApBhB,IAAMC,YAAYC,SAAS,aAAT,GAAlB;;AAEA;;;;;;;;;;;;;;;;;;AAkBO,SAASF,OAAT,CAAiBG,QAAjB,EAA2B;AAC9B;AACA,QAAIC,MAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,GAAvE,EAA4E,GAA5E,CAAV;AAAA,QACIC,SAAS;AACC;AACA;AACA,MAHD,EAGK,EAHL,EAGS,EAHT,EAGa,EAHb,EAGiB,EAHjB,EAGqB,EAHrB,EAGyB,EAHzB,EAG6B,EAH7B,EAIC,GAJD,EAIM,EAJN,EAIU,EAJV,EAIc,EAJd,EAIkB,EAJlB,EAKC,GALD,EAKM,GALN,EAKW,EALX,EAKe,EALf,EAKmB,EALnB,EAMC,GAND,EAMM,GANN,EAMW,EANX,EAMe,EANf,EAMmB,EANnB,EAOC,GAPD,EAOM,EAPN,EAOU,EAPV,EAOc,EAPd,EAOkB,EAPlB,EAOsB,EAPtB,EAO0B,EAP1B,EAO8B,EAP9B,EAOkC,EAPlC,EAOsC,EAPtC,EAO0C,EAP1C,EAO8C,EAP9C,EAOkD,EAPlD,CADb;;AAUc;AACVC,SAAKD,OAAOE,MAXhB;AAAA,QAYIC,QAAQ,KAZZ;AAAA,QAaIC,mBAbJ;AAAA,QAagBC,WAbhB;AAAA,QAaoBC,gBAbpB;AAAA,QAa6BC,mBAb7B;AAAA,QAayCC,cAbzC;AAcA;AACA,QAAI,CAAEV,QAAN,EAAgB;AACZA,mBAAW,EAAX;AACH;AACD;AACAS,iBAAaT,SAASW,GAAT,IAAgBC,KAAKC,MAAlC;AACA;AACA,QAAIb,SAASK,KAAb,EAAoB;AAChB,YAAI,OAAOL,SAASK,KAAhB,KAA0B,QAA9B,EAAwC;AACpCA,oBAAQL,SAASK,KAAjB;AACH,SAFD,MAGK;AACDA,oBAAQ,IAAIS,IAAJ,GAAWC,OAAX,EAAR;AACA,gBAAIjB,UAAUkB,WAAV,IAAyB,OAAOlB,UAAUkB,WAAV,CAAsBC,GAA7B,KAAqC,UAAlE,EAA8E;AAC1EZ,yBAASW,YAAYC,GAAZ,EAAT;AACH;AACJ;AACJ;AACD;AACA,SAAKV,KAAK,CAAV,EAAaA,KAAKJ,EAAlB,EAAsBI,IAAtB,EAA4B;AACxBG,gBAAQR,OAAOK,EAAP,CAAR;AACAD,qBAAaI,UAAU,EAAvB;AACA,YAAIJ,cAAcI,UAAU,GAA5B,EAAiC;AAC7B,gBAAIL,KAAJ,EAAW;AACPG,0BAAW,CAACH,QAASI,eAAe,EAAzB,IAAgC,EAAjC,GAAuC,CAAjD;AACAJ,wBAAQO,KAAKM,KAAL,CAAWb,QAAQ,EAAnB,CAAR;AACH,aAHD,MAIK;AACDG,0BAAWC,eAAe,EAAhB,GAAsB,CAAhC,CADC,CACoC;AACxC;AACDP,mBAAOK,EAAP,IAAaN,IAAIK,aACKE,OADL,GAEOA,UAAU,GAAX,GAAkB,GAF5B,CAAb,CAR6B,CAUqB;AACrD;AACJ;AACD;;AAEA,WAAON,OAAOiB,IAAP,CAAY,EAAZ,CAAP;AACH","file":"iden.common.js","sourcesContent":["/*\r\n * iden\r\n * https://github.com/gamtiq/iden\r\n *\r\n * Copyright (c) 2016 Denis Sikuler\r\n * Licensed under the MIT license.\r\n */\r\n\r\n\r\n/**\r\n * Unique identifier generator.\r\n * \r\n * @module iden\r\n */\r\n\r\n// eslint-disable-next-line lines-around-directive, strict\r\n\"use strict\";\r\n\r\n/* global performance:false */\r\n\r\n// eslint-disable-next-line no-new-func\r\nconst globalObj = Function(\"return this\")();\r\n\r\n/**\r\n * Generate unique identifier (UUID as described in RFC 4122 version 4, see https://en.wikipedia.org/wiki/Universally_unique_identifier)\r\n * and return its value.\r\n *\r\n * @param {Object} [settings]\r\n *     Operation settings. Keys are settings names, values are corresponding settings values.\r\n *     The following settings are supported (setting's default value is specified in parentheses):\r\n *     \r\n *   * `rng`: `Function` (`Math.random`) - random number generator that should be used;\r\n *      the generator should produce values from [0, 1).\r\n *   * `shift`: `Boolean, Number` (false) - whether 'shift' should be used when calculating random numbers;\r\n *      numerical value is used as 'shift' as is; if boolean value `true` is set, then current time is used\r\n *      to determine a 'shift' value.\r\n * @return {string}\r\n *      Generated UUID.\r\n * @method\r\n * @alias iden.getUuid\r\n */\r\nexport function getUuid(settings) {\r\n    /* eslint-disable no-magic-numbers, prefer-const */\r\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\r\n        result = [\r\n                  /* eslint-disable indent */\r\n                  // xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n                  \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\r\n                  \"-\", \"\", \"\", \"\", \"\",\r\n                  \"-\", \"4\", \"\", \"\", \"\",\r\n                  \"-\", \"y\", \"\", \"\", \"\",\r\n                  \"-\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"\r\n                  ],\r\n                  /* eslint-enable indent */\r\n        nL = result.length,\r\n        shift = false,\r\n        bUsualItem, nI, nRandom, randNumGen, sItem;\r\n    /* eslint-disable no-param-reassign */\r\n    if (! settings) {\r\n        settings = {};\r\n    }\r\n    /* eslint-enable no-param-reassign */\r\n    randNumGen = settings.rng || Math.random;\r\n    /* eslint-enable prefer-const */\r\n    if (settings.shift) {\r\n        if (typeof settings.shift === \"number\") {\r\n            shift = settings.shift;\r\n        }\r\n        else {\r\n            shift = new Date().getTime();\r\n            if (globalObj.performance && typeof globalObj.performance.now === \"function\") {\r\n                shift += performance.now();\r\n            }\r\n        }\r\n    }\r\n    /* eslint-disable no-bitwise, no-magic-numbers */\r\n    for (nI = 0; nI < nL; nI++) {\r\n        sItem = result[nI];\r\n        bUsualItem = sItem === \"\";\r\n        if (bUsualItem || sItem === \"y\") {\r\n            if (shift) {\r\n                nRandom = ((shift + (randNumGen() * 16)) % 16) | 0;\r\n                shift = Math.floor(shift / 16);\r\n            }\r\n            else {\r\n                nRandom = (randNumGen() * 16) | 0;   // -> integer from [0, 15]\r\n            }\r\n            result[nI] = hex[bUsualItem\r\n                                ? nRandom\r\n                                : ((nRandom & 0x3) | 0x8)];   // ((nRandom & 0x3) | 0x8) -> 8, 9, 10 or 11\r\n        }\r\n    }\r\n    /* eslint-enable no-bitwise, prefer-const */\r\n    \r\n    return result.join(\"\");\r\n}\r\n"]}